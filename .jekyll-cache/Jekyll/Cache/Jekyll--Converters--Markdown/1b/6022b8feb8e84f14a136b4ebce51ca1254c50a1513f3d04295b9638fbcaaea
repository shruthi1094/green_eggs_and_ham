I";S<details open="">
  <summary class="text-delta">
    Table of contents
  </summary>
<ol id="markdown-toc">
  <li><a href="#arrays" id="markdown-toc-arrays">Arrays</a>    <ol>
      <li><a href="#1-maximum-subarray" id="markdown-toc-1-maximum-subarray">1. Maximum Subarray</a>        <ol>
          <li><a href="#scrappy-solution" id="markdown-toc-scrappy-solution">Scrappy Solution</a></li>
          <li><a href="#good-solution-in-python" id="markdown-toc-good-solution-in-python">Good Solution in Python</a></li>
          <li><a href="#good-solution-in-c" id="markdown-toc-good-solution-in-c">Good Solution in C++</a></li>
        </ol>
      </li>
      <li><a href="#2-contains-duplicate" id="markdown-toc-2-contains-duplicate">2. Contains Duplicate</a>        <ol>
          <li><a href="#good-solution-in-python-1" id="markdown-toc-good-solution-in-python-1">Good Solution in Python</a></li>
          <li><a href="#good-solution-in-c-1" id="markdown-toc-good-solution-in-c-1">Good Solution in C++</a></li>
        </ol>
      </li>
      <li><a href="#3-two-sum" id="markdown-toc-3-two-sum">3. Two Sum</a>        <ol>
          <li><a href="#solution-in-python" id="markdown-toc-solution-in-python">Solution in Python</a></li>
          <li><a href="#solution-in-c" id="markdown-toc-solution-in-c">Solution in C++</a></li>
        </ol>
      </li>
      <li><a href="#4-merge-sorted-array" id="markdown-toc-4-merge-sorted-array">4. Merge Sorted Array</a>        <ol>
          <li><a href="#scrappy-python-solution-didnt-even-work" id="markdown-toc-scrappy-python-solution-didnt-even-work">Scrappy Python Solution (didnâ€™t even work)</a></li>
          <li><a href="#good-solution-in-python-2" id="markdown-toc-good-solution-in-python-2">Good Solution in Python</a></li>
        </ol>
      </li>
    </ol>
  </li>
</ol>

</details>

<h1 id="arrays">Arrays</h1>

<h2 id="1-maximum-subarray">1. Maximum Subarray</h2>

<p><img src="/images/53.png" alt="" /></p>

<h3 id="scrappy-solution">Scrappy Solution</h3>
<p>The solution timed out on the submission test cases</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">max_sum</span> <span class="o">=</span> <span class="o">-</span><span class="mi">10000</span>

    <span class="k">def</span> <span class="nf">maxSubArray</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">sliding_window</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">sliding_window</span><span class="p">:</span>
                <span class="n">sliding_window</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="n">curr_sum</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">find_sum</span><span class="p">(</span><span class="n">sliding_window</span><span class="p">)</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">save_sum</span><span class="p">(</span><span class="n">curr_sum</span><span class="p">)</span>
            
            <span class="k">elif</span> <span class="bp">self</span><span class="p">.</span><span class="n">find_sum</span><span class="p">(</span><span class="n">sliding_window</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">sliding_window</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="n">sliding_window</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="n">curr_sum</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">find_sum</span><span class="p">(</span><span class="n">sliding_window</span><span class="p">)</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">save_sum</span><span class="p">(</span><span class="n">curr_sum</span><span class="p">)</span>
            
            <span class="k">else</span><span class="p">:</span>
                <span class="n">sliding_window</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="n">curr_sum</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">find_sum</span><span class="p">(</span><span class="n">sliding_window</span><span class="p">)</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">save_sum</span><span class="p">(</span><span class="n">curr_sum</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">max_sum</span>
    
    <span class="k">def</span> <span class="nf">find_sum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">window</span><span class="p">):</span>
        <span class="nb">sum</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">window</span><span class="p">:</span>
            <span class="nb">sum</span> <span class="o">+=</span> <span class="n">i</span>
        
        <span class="k">return</span> <span class="nb">sum</span>

    <span class="k">def</span> <span class="nf">save_sum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sums</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">sums</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="p">.</span><span class="n">max_sum</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">max_sum</span> <span class="o">=</span> <span class="n">sums</span>
</code></pre></div></div>

<h3 id="good-solution-in-python">Good Solution in Python</h3>

<p><a href="https://www.youtube.com/watch?v=5WZl3MMT0Eg&amp;ab_channel=NeetCode">Reference</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">max_sum</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">cur_sum</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">maxSubArray</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">max_sum</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">cur_sum</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">cur_sum</span> <span class="o">=</span> <span class="mi">0</span>
            
            <span class="bp">self</span><span class="p">.</span><span class="n">cur_sum</span> <span class="o">+=</span> <span class="n">i</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">max_sum</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">max_sum</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">cur_sum</span><span class="p">)</span>

        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">max_sum</span>
</code></pre></div></div>

<h3 id="good-solution-in-c">Good Solution in C++</h3>

<h2 id="2-contains-duplicate">2. Contains Duplicate</h2>

<p><img src="/images/217.png" alt="" /></p>

<h3 id="good-solution-in-python-1">Good Solution in Python</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">containsDuplicate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="n">hashset</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">hashset</span><span class="p">:</span>
                <span class="n">flag</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="k">break</span>
            <span class="n">hashset</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">flag</span>
</code></pre></div></div>

<h3 id="good-solution-in-c-1">Good Solution in C++</h3>

<h2 id="3-two-sum">3. Two Sum</h2>

<p><a href="/images/1.png"></a></p>

<h3 id="solution-in-python">Solution in Python</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">target</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="c1"># we'll build the ref dict as we iterate over nums
</span>        <span class="c1"># after this hashmap is built, we'll then query it over time
</span>        <span class="c1"># ref_dict format is {value: index, value: index...}
</span>        <span class="n">ref_dict</span> <span class="o">=</span> <span class="p">{</span><span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span><span class="mi">0</span><span class="p">}</span>

        <span class="c1"># create a temp value which when added to another element gives target
</span>        <span class="n">target_complement</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="n">target_complement</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">target_complement</span><span class="p">)</span> <span class="ow">in</span> <span class="n">ref_dict</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span>
                <span class="k">return</span> <span class="p">[</span><span class="n">ref_dict</span><span class="p">[(</span><span class="n">target</span><span class="o">-</span><span class="n">target_complement</span><span class="p">)],</span> <span class="n">i</span><span class="p">]</span>
            
            <span class="k">else</span><span class="p">:</span>
                <span class="n">ref_dict</span><span class="p">[</span><span class="n">target_complement</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
</code></pre></div></div>

<h3 id="solution-in-c">Solution in C++</h3>

<h2 id="4-merge-sorted-array">4. Merge Sorted Array</h2>

<p><img src="/images/88.png" alt="" /></p>

<p><a href="https://www.youtube.com/watch?v=P1Ic85RarKY&amp;ab_channel=NeetCode">Reference</a></p>

<h3 id="scrappy-python-solution-didnt-even-work">Scrappy Python Solution (didnâ€™t even work)</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums1</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">m</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">nums2</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="s">"""
        Do not return anything, modify nums1 in-place instead.
        """</span>
        <span class="c1"># let's find the largest value in the m array and see if there's anything larger
</span>        <span class="c1"># than that in our n array. If there is something larger, then let's not consider
</span>        <span class="c1"># that for computation
</span>        <span class="n">m</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="n">n</span>

        <span class="c1"># find largest in m
</span>        <span class="n">largest</span> <span class="o">=</span> <span class="n">nums1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="o">-</span><span class="n">n</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">nums1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">largest</span><span class="p">:</span>
                <span class="n">largest</span> <span class="o">=</span> <span class="n">i</span>
        
        <span class="c1"># find all numbers in n array greater than largest
</span>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">nums2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">largest</span><span class="p">:</span>
                <span class="c1"># then save this and all following elements (as they are sorted)
</span>                <span class="c1"># in the below specified position
</span>                <span class="n">nums1</span><span class="p">[(</span><span class="n">m</span> <span class="o">-</span> <span class="n">n</span> <span class="o">+</span> <span class="n">j</span><span class="p">):]</span> <span class="o">=</span> <span class="n">nums2</span><span class="p">[</span><span class="n">j</span><span class="p">:]</span>
            
            <span class="k">else</span><span class="p">:</span>
                <span class="c1"># now if it isn't larger than all values in nums1, we'll have
</span>                <span class="c1"># to fit it in somewhere
</span>
                <span class="c1"># lets make use of the fact that it's ordered and start at the
</span>                <span class="c1"># middle of the nums1 array (essentially do binary search)
</span>
                <span class="n">target_index</span> <span class="o">=</span> <span class="bp">None</span>
                <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="n">high</span> <span class="o">=</span> <span class="n">m</span><span class="o">-</span><span class="n">n</span>
                <span class="k">while</span> <span class="n">low</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">:</span>
                    <span class="n">mid</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">m</span><span class="o">-</span><span class="n">n</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>

                    <span class="k">if</span> <span class="n">nums2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">nums1</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
                        <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
                    <span class="k">elif</span> <span class="n">nums2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">nums1</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
                        <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">target_index</span> <span class="o">=</span> <span class="n">mid</span>
                
                <span class="c1"># if we haven't found it yet then just see check the low and high
</span>                <span class="k">if</span> <span class="n">target_index</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">nums2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">mid</span><span class="p">:</span>
                        <span class="n">nums1</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">nums2</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">mid</span><span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">nums1</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">nums2</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="good-solution-in-python-2">Good Solution in Python</h3>

:ET